// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	io "io"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Requester is an autogenerated mock type for the Requester type
type Requester struct {
	mock.Mock
}

type Requester_Expecter struct {
	mock *mock.Mock
}

func (_m *Requester) EXPECT() *Requester_Expecter {
	return &Requester_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: url, body
func (_m *Requester) Delete(url string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(url, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader) *http.Response); ok {
		r0 = rf(url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Requester_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Requester_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - url string
//   - body io.Reader
func (_e *Requester_Expecter) Delete(url interface{}, body interface{}) *Requester_Delete_Call {
	return &Requester_Delete_Call{Call: _e.mock.On("Delete", url, body)}
}

func (_c *Requester_Delete_Call) Run(run func(url string, body io.Reader)) *Requester_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader))
	})
	return _c
}

func (_c *Requester_Delete_Call) Return(_a0 *http.Response, _a1 error) *Requester_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: url
func (_m *Requester) Get(url string) (*http.Response, error) {
	ret := _m.Called(url)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Requester_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Requester_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url string
func (_e *Requester_Expecter) Get(url interface{}) *Requester_Get_Call {
	return &Requester_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *Requester_Get_Call) Run(run func(url string)) *Requester_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Requester_Get_Call) Return(_a0 *http.Response, _a1 error) *Requester_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Patch provides a mock function with given fields: url, body
func (_m *Requester) Patch(url string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(url, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader) *http.Response); ok {
		r0 = rf(url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Requester_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type Requester_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - url string
//   - body io.Reader
func (_e *Requester_Expecter) Patch(url interface{}, body interface{}) *Requester_Patch_Call {
	return &Requester_Patch_Call{Call: _e.mock.On("Patch", url, body)}
}

func (_c *Requester_Patch_Call) Run(run func(url string, body io.Reader)) *Requester_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader))
	})
	return _c
}

func (_c *Requester_Patch_Call) Return(_a0 *http.Response, _a1 error) *Requester_Patch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Post provides a mock function with given fields: url, body
func (_m *Requester) Post(url string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(url, body)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader) *http.Response); ok {
		r0 = rf(url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Requester_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type Requester_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - url string
//   - body io.Reader
func (_e *Requester_Expecter) Post(url interface{}, body interface{}) *Requester_Post_Call {
	return &Requester_Post_Call{Call: _e.mock.On("Post", url, body)}
}

func (_c *Requester_Post_Call) Run(run func(url string, body io.Reader)) *Requester_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.Reader))
	})
	return _c
}

func (_c *Requester_Post_Call) Return(_a0 *http.Response, _a1 error) *Requester_Post_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRequester interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequester creates a new instance of Requester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequester(t mockConstructorTestingTNewRequester) *Requester {
	mock := &Requester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
